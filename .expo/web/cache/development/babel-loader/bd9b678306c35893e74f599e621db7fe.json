{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, createContext } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar SettingContext = createContext();\n\nfunction SettingProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState({\n    language: 'vie',\n    theme: 'light'\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      options = _useState2[0],\n      setOptions = _useState2[1];\n\n  var chooseLanguage = function chooseLanguage(language) {\n    console.log(options);\n  };\n\n  var value = {\n    chooseLanguage: chooseLanguage,\n    options: options\n  };\n  return _jsx(SettingContext.Provider, {\n    value: value,\n    children: children\n  });\n}\n\nexport { SettingProvider, SettingContext };","map":{"version":3,"sources":["D:/Lukim/screens/SettingScreen/Context.js"],"names":["React","useState","createContext","SettingContext","SettingProvider","children","language","theme","options","setOptions","chooseLanguage","console","log","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA4BC,aAA5B,QAAiD,OAAjD;;AACA,IAAMC,cAAc,GAAGD,aAAa,EAApC;;AACA,SAASE,eAAT,OAAqC;AAAA,MAAXC,QAAW,QAAXA,QAAW;;AACjC,kBAA+BJ,QAAQ,CAAC;AACpCK,IAAAA,QAAQ,EAAE,KAD0B;AAEpCC,IAAAA,KAAK,EAAE;AAF6B,GAAD,CAAvC;AAAA;AAAA,MAAOC,OAAP;AAAA,MAAiBC,UAAjB;;AAIA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACJ,QAAD,EAAc;AAIjCK,IAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACH,GALD;;AAMA,MAAMK,KAAK,GAAG;AACVH,IAAAA,cAAc,EAAdA,cADU;AAEVF,IAAAA,OAAO,EAAPA;AAFU,GAAd;AAIA,SACI,KAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAEK,KAAhC;AAAA,cACKR;AADL,IADJ;AAKH;;AACD,SAASD,eAAT,EAA0BD,cAA1B","sourcesContent":["import React, { useState ,  createContext } from 'react'    \r\nconst SettingContext = createContext() \r\nfunction SettingProvider({children}) { \r\n    const [options , setOptions] = useState({\r\n        language: 'vie', \r\n        theme: 'light',\r\n    })\r\n    const chooseLanguage = (language) => {\r\n        // setOptions({\r\n        //     language: language, \r\n        // })\r\n        console.log(options)\r\n    } \r\n    const value = { \r\n        chooseLanguage,\r\n        options,   \r\n    }\r\n    return (\r\n        <SettingContext.Provider value={value}> \r\n            {children}\r\n        </SettingContext.Provider> \r\n    )\r\n}\r\nexport { SettingProvider, SettingContext }"]},"metadata":{},"sourceType":"module"}