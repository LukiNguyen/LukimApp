{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { useState, useEffect, useMemo } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { AuthContext } from \"./screens/UserConfirm/Context\";\nimport RootScreen from \"./screens/UserConfirm/RootScreen\";\nimport HomeScreen from \"./screens/HomeScreen\";\nimport Tabar from \"./components/Tabar\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function App() {\n  var initialLoginState = {\n    isLoading: true,\n    userName: null,\n    userToken: null\n  };\n\n  var loginReducer = function loginReducer(prevState, action) {\n    switch (action.type) {\n      case 'RETRIEVE_TOKEN':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          userToken: action.token,\n          isLoading: false\n        });\n\n      case 'LOGIN':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          userName: action.id,\n          userToken: action.token,\n          isLoading: false\n        });\n\n      case 'LOGOUT':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          userName: null,\n          userToken: null,\n          isLoading: false\n        });\n\n      case 'REGISTER':\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          userName: action.id,\n          userToken: action.token,\n          isLoading: false\n        });\n    }\n  };\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      userToken = _useState4[0],\n      setUserToken = _useState4[1];\n\n  var authContext = useMemo(function () {\n    return {\n      signIn: function signIn() {\n        setUserToken('sdfsdff');\n        setIsLoading(false);\n      },\n      signUp: function signUp() {\n        setUserToken(null);\n        setIsLoading(false);\n      },\n      signOut: function signOut() {\n        setUserToken('sdfsdff');\n        setIsLoading(false);\n      }\n    };\n  });\n  useEffect(function () {\n    setTimeout(function () {\n      setIsLoading(false);\n    }, 1000);\n  }, []);\n\n  if (isLoading) {\n    return _jsx(View, {\n      style: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      children: _jsx(ActivityIndicator, {\n        size: \"large\",\n        color: \"#1b242d\"\n      })\n    });\n  }\n\n  return _jsx(AuthContext.Provider, {\n    value: authContext,\n    children: _jsx(NavigationContainer, {\n      children: _jsx(RootScreen, {})\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  margintabbar: {}\n});","map":{"version":3,"sources":["D:/Lukim/App.js"],"names":["useState","useEffect","useMemo","NavigationContainer","AuthContext","RootScreen","HomeScreen","Tabar","App","initialLoginState","isLoading","userName","userToken","loginReducer","prevState","action","type","token","id","setIsLoading","setUserToken","authContext","signIn","signUp","signOut","setTimeout","flex","justifyContent","alignItems","styles","StyleSheet","create","margintabbar"],"mappings":";;;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA6BC,OAA7B,QAA4C,OAA5C;AACA,SACEC,mBADF,QAEO,0BAFP;;;;AAIA,SAASC,WAAT;AACA,OAAOC,UAAP;AACA,OAAOC,UAAP;AACA,OAAOC,KAAP;;AACA,eAAe,SAASC,GAAT,GAAe;AAC5B,MAAMC,iBAAiB,GAAG;AACxBC,IAAAA,SAAS,EAAE,IADa;AAExBC,IAAAA,QAAQ,EAAE,IAFc;AAGxBC,IAAAA,SAAS,EAAE;AAHa,GAA1B;;AAMA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,SAAD,EAAYC,MAAZ,EAAuB;AAC1C,YAAQA,MAAM,CAACC,IAAf;AACE,WAAK,gBAAL;AACE,+CACKF,SADL;AAEEF,UAAAA,SAAS,EAAEG,MAAM,CAACE,KAFpB;AAGEP,UAAAA,SAAS,EAAE;AAHb;;AAKF,WAAK,OAAL;AACE,+CACKI,SADL;AAEEH,UAAAA,QAAQ,EAAEI,MAAM,CAACG,EAFnB;AAGEN,UAAAA,SAAS,EAAEG,MAAM,CAACE,KAHpB;AAIEP,UAAAA,SAAS,EAAE;AAJb;;AAMF,WAAK,QAAL;AACE,+CACKI,SADL;AAEEH,UAAAA,QAAQ,EAAE,IAFZ;AAGEC,UAAAA,SAAS,EAAE,IAHb;AAIEF,UAAAA,SAAS,EAAE;AAJb;;AAMF,WAAK,UAAL;AACE,+CACKI,SADL;AAEEH,UAAAA,QAAQ,EAAEI,MAAM,CAACG,EAFnB;AAGEN,UAAAA,SAAS,EAAEG,MAAM,CAACE,KAHpB;AAIEP,UAAAA,SAAS,EAAE;AAJb;AAtBJ;AA6BD,GA9BD;;AAgCA,kBAAiCV,QAAQ,CAAC,IAAD,CAAzC;AAAA;AAAA,MAAOU,SAAP;AAAA,MAAiBS,YAAjB;;AACA,mBAAiCnB,QAAQ,CAAC,IAAD,CAAzC;AAAA;AAAA,MAAOY,SAAP;AAAA,MAAiBQ,YAAjB;;AACA,MAAMC,WAAW,GAAGnB,OAAO,CAAC;AAAA,WAAO;AACjCoB,MAAAA,MAAM,EAAE,kBAAM;AACZF,QAAAA,YAAY,CAAC,SAAD,CAAZ;AACAD,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OAJgC;AAKjCI,MAAAA,MAAM,EAAE,kBAAM;AACZH,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACAD,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OARgC;AASjCK,MAAAA,OAAO,EAAE,mBAAM;AACbJ,QAAAA,YAAY,CAAC,SAAD,CAAZ;AACAD,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AAZgC,KAAP;AAAA,GAAD,CAA3B;AAcAlB,EAAAA,SAAS,CAAC,YAAM;AACdwB,IAAAA,UAAU,CAAC,YAAM;AACfN,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAFS,EAER,IAFQ,CAAV;AAGD,GAJQ,EAIP,EAJO,CAAT;;AAKA,MAAIT,SAAJ,EAAgB;AACd,WACE,KAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACgB,QAAAA,IAAI,EAAC,CAAN;AAAQC,QAAAA,cAAc,EAAC,QAAvB;AAAgCC,QAAAA,UAAU,EAAC;AAA3C,OAAb;AAAA,gBACE,KAAC,iBAAD;AAAmB,QAAA,IAAI,EAAC,OAAxB;AAAiC,QAAA,KAAK,EAAC;AAAvC;AADF,MADF;AAKD;;AACD,SACE,KAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEP,WAA7B;AAAA,cACE,KAAC,mBAAD;AAAA,gBACE,KAAC,UAAD;AADF;AADF,IADF;AAOD;AACD,IAAMQ,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,YAAY,EAAE;AADiB,CAAlB,CAAf","sourcesContent":["import { useState, useEffect,useMemo } from 'react'\nimport { \n  NavigationContainer,  \n} from '@react-navigation/native';\nimport { View,StyleSheet,ActivityIndicator } from 'react-native';\nimport { AuthContext } from './screens/UserConfirm/Context';\nimport RootScreen from './screens/UserConfirm/RootScreen';\nimport HomeScreen from './screens/HomeScreen'\nimport Tabar from \"./components/Tabar\";\nexport default function App() {\n  const initialLoginState = {\n    isLoading: true,\n    userName: null,\n    userToken: null,\n  };\n\n  const loginReducer = (prevState, action) => {\n    switch( action.type ) {\n      case 'RETRIEVE_TOKEN': \n        return {\n          ...prevState,\n          userToken: action.token,\n          isLoading: false,\n        };\n      case 'LOGIN': \n        return {\n          ...prevState,\n          userName: action.id,\n          userToken: action.token,\n          isLoading: false,\n        };\n      case 'LOGOUT': \n        return {\n          ...prevState,\n          userName: null,\n          userToken: null,\n          isLoading: false,\n        };\n      case 'REGISTER': \n        return {\n          ...prevState,\n          userName: action.id,\n          userToken: action.token,\n          isLoading: false,\n        };\n    }\n  };\n  \n  const [isLoading,setIsLoading] = useState(true)\n  const [userToken,setUserToken] = useState(null) \n  const authContext = useMemo(() => ({\n    signIn: () => {\n      setUserToken('sdfsdff')\n      setIsLoading(false)\n    },\n    signUp: () => {\n      setUserToken(null)\n      setIsLoading(false)\n    },\n    signOut: () => {\n      setUserToken('sdfsdff')\n      setIsLoading(false)\n    },\n  }))\n  useEffect(() => {\n    setTimeout(() => {\n      setIsLoading(false)\n    },1000)\n  },[])\n  if( isLoading ) {\n    return(\n      <View style={{flex:1,justifyContent:'center',alignItems:'center'}}>\n        <ActivityIndicator size=\"large\"  color=\"#1b242d\"/>\n      </View>\n    );\n  }\n  return (  \n    <AuthContext.Provider value={authContext}>\n      <NavigationContainer >\n        <RootScreen/> \n      </NavigationContainer>\n    </AuthContext.Provider>\n  );\n} \nconst styles = StyleSheet.create({ \n  margintabbar: { \n  }\n});\n"]},"metadata":{},"sourceType":"module"}