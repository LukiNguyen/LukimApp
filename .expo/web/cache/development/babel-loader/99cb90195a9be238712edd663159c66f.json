{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState, useEffect, useMemo, useContext } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { useUserActions } from \"../hook/useUserActionsContext\";\nimport RootScreen from \"../screens/UserConfirm/RootScreen\";\nimport Tabar from \"../components/Tabar\";\nimport React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar HandleScreen = function HandleScreen() {\n  var _useUserActions = useUserActions(),\n      checkUserLogin = _useUserActions.checkUserLogin,\n      login = _useUserActions.login;\n\n  useEffect(function () {\n    setTimeout(function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(checkUserLogin());\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }, 1000);\n  }, [login]);\n\n  if (login) {\n    return _jsx(View, {\n      style: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      children: _jsx(ActivityIndicator, {\n        size: \"large\",\n        color: \"#1b242d\"\n      })\n    });\n  }\n\n  return _jsx(_Fragment, {\n    children: userToken !== null ? _jsx(Tabar, {}) : _jsx(NavigationContainer, {\n      children: _jsx(RootScreen, {})\n    })\n  });\n};\n\nexport default HandleScreen;\nvar styles = StyleSheet.create({});","map":{"version":3,"sources":["D:/Lukim/screens/HandleScreen.js"],"names":["useState","useEffect","useMemo","useContext","NavigationContainer","useUserActions","RootScreen","Tabar","React","HandleScreen","checkUserLogin","login","setTimeout","flex","justifyContent","alignItems","userToken","styles","StyleSheet","create"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA6BC,OAA7B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SACEC,mBADF,QAEO,0BAFP;;;;AAIA,SAASC,cAAT;AACA,OAAOC,UAAP;AAEA,OAAOC,KAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,wBAAkCJ,cAAc,EAAhD;AAAA,MAAQK,cAAR,mBAAQA,cAAR;AAAA,MAAwBC,KAAxB,mBAAwBA,KAAxB;;AAEAV,EAAAA,SAAS,CAAC,YAAM;AACdW,IAAAA,UAAU,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACAF,cAAc,EADd;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD,EAEP,IAFO,CAAV;AAGD,GAJQ,EAIN,CAACC,KAAD,CAJM,CAAT;;AAKE,MAAIA,KAAJ,EAAY;AACR,WACE,KAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACE,QAAAA,IAAI,EAAC,CAAN;AAAQC,QAAAA,cAAc,EAAC,QAAvB;AAAgCC,QAAAA,UAAU,EAAC;AAA3C,OAAb;AAAA,gBACE,KAAC,iBAAD;AAAmB,QAAA,IAAI,EAAC,OAAxB;AAAiC,QAAA,KAAK,EAAC;AAAvC;AADF,MADF;AAKL;;AACD,SACE;AAAA,cAEIC,SAAS,KAAK,IAAd,GACE,KAAC,KAAD,KADF,GAIA,KAAC,mBAAD;AAAA,gBACA,KAAC,UAAD;AADA;AANJ,IADF;AAcD,CA7BD;;AA+BA,eAAeP,YAAf;AAEA,IAAMQ,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB,EAAlB,CAAf","sourcesContent":["import { useState, useEffect,useMemo,useContext } from 'react'\r\nimport { \r\n  NavigationContainer,  \r\n} from '@react-navigation/native';\r\nimport { View,StyleSheet,ActivityIndicator } from 'react-native';\r\nimport { useUserActions } from '../hook/useUserActionsContext';   \r\nimport RootScreen from '../screens/UserConfirm/RootScreen';\r\n// import HomeScreen from '../screens/HomeScreen'\r\nimport Tabar from \"../components/Tabar\";\r\nimport React from 'react';\r\n\r\nconst HandleScreen = () => {  \r\n  const { checkUserLogin, login } = useUserActions()\r\n  \r\n  useEffect(() => {\r\n    setTimeout(async() => {\r\n        await  checkUserLogin()\r\n    }, 1000); \r\n  }, [login]); \r\n    if( login ) {\r\n        return(\r\n          <View style={{flex:1,justifyContent:'center',alignItems:'center'}}>\r\n            <ActivityIndicator size=\"large\"  color=\"#1b242d\"/>\r\n          </View>\r\n        );\r\n  }\r\n  return (\r\n    <>\r\n      { \r\n        userToken !== null ? (\r\n          <Tabar />\r\n      )\r\n      :\r\n        <NavigationContainer >\r\n        <RootScreen/> \r\n      </NavigationContainer>\r\n    }\r\n      \r\n    </>\r\n  );\r\n};\r\n\r\nexport default HandleScreen;\r\n\r\nconst styles = StyleSheet.create({});\r\n"]},"metadata":{},"sourceType":"module"}