{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useContext } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { useUserActions } from \"../hook/useUserActionsContext\";\nimport { UserContext } from \"../screens/UserConfirm/Context\";\nimport { checkStorageUser } from \"../actions/UserActions\";\nimport RootScreen from \"../screens/UserConfirm/RootScreen\";\nimport Tabar from \"../components/Tabar\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar HandleScreen = function HandleScreen() {\n  var _useContext = useContext(UserContext),\n      userName = _useContext.userName,\n      isLoading = _useContext.isLoading,\n      isUser = _useContext.isUser;\n\n  var _useUserActions = useUserActions(),\n      login = _useUserActions.login,\n      logout = _useUserActions.logout;\n\n  var dataUser = ['lukim', 'admin'];\n  useEffect(function () {\n    setTimeout(function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(checkStorageUser('userToken').then(function (data) {\n                if (dataUser.includes(data, 0)) {\n                  login({\n                    userName: \"lukim\",\n                    passWord: \"lukim\"\n                  });\n                } else {\n                  logout();\n                }\n              }));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }, 1000);\n  }, [userName]);\n\n  if (isLoading) {\n    return _jsx(View, {\n      style: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      children: _jsx(ActivityIndicator, {\n        size: \"large\",\n        color: \"#1b242d\"\n      })\n    });\n  }\n\n  return _jsx(_Fragment, {\n    children: isUser ? _jsx(Tabar, {}) : _jsx(NavigationContainer, {\n      children: _jsx(RootScreen, {})\n    })\n  });\n};\n\nexport default HandleScreen;\nvar styles = StyleSheet.create({});","map":{"version":3,"sources":["D:/Lukim/screens/HandleScreen.js"],"names":["React","useEffect","useContext","NavigationContainer","useUserActions","UserContext","checkStorageUser","RootScreen","Tabar","HandleScreen","userName","isLoading","isUser","login","logout","dataUser","setTimeout","then","data","includes","passWord","flex","justifyContent","alignItems","styles","StyleSheet","create"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,SAASC,mBAAT,QAAoC,0BAApC;;;;AAEA,SAASC,cAAT;AACA,SAASC,WAAT;AACA,SAASC,gBAAT;AACA,OAAOC,UAAP;AACA,OAAOC,KAAP;;;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,oBAAuCP,UAAU,CAACG,WAAD,CAAjD;AAAA,MAAQK,QAAR,eAAQA,QAAR;AAAA,MAAkBC,SAAlB,eAAkBA,SAAlB;AAAA,MAA4BC,MAA5B,eAA4BA,MAA5B;;AACA,wBAAyBR,cAAc,EAAvC;AAAA,MAAQS,KAAR,mBAAQA,KAAR;AAAA,MAAcC,MAAd,mBAAcA,MAAd;;AAEF,MAAMC,QAAQ,GAAG,CAAC,OAAD,EAAS,OAAT,CAAjB;AACEd,EAAAA,SAAS,CAAC,YAAM;AACde,IAAAA,UAAU,CAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACJV,gBAAgB,CAAC,WAAD,CAAhB,CAA8BW,IAA9B,CAAmC,UAAAC,IAAI,EAAI;AAC/C,oBAAGH,QAAQ,CAACI,QAAT,CAAkBD,IAAlB,EAAuB,CAAvB,CAAH,EAA8B;AAC1BL,kBAAAA,KAAK,CAAC;AACJH,oBAAAA,QAAQ,EAAC,OADL;AAEJU,oBAAAA,QAAQ,EAAC;AAFL,mBAAD,CAAL;AAIH,iBALD,MAMK;AACFN,kBAAAA,MAAM;AACR;AACF,eAVK,CADI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF,EAaP,IAbO,CAAV;AAcD,GAfQ,EAeN,CAACJ,QAAD,CAfM,CAAT;;AAgBA,MAAIC,SAAJ,EAAgB;AACV,WACE,KAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACU,QAAAA,IAAI,EAAC,CAAN;AAAQC,QAAAA,cAAc,EAAC,QAAvB;AAAgCC,QAAAA,UAAU,EAAC;AAA3C,OAAb;AAAA,gBACE,KAAC,iBAAD;AAAmB,QAAA,IAAI,EAAC,OAAxB;AAAiC,QAAA,KAAK,EAAC;AAAvC;AADF,MADF;AAKL;;AACD,SACE;AAAA,cAEIX,MAAM,GACJ,KAAC,KAAD,KADI,GAIN,KAAC,mBAAD;AAAA,gBACE,KAAC,UAAD;AADF;AANJ,IADF;AAcD,CA1CD;;AA4CA,eAAeH,YAAf;AAEA,IAAMe,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB,EAAlB,CAAf","sourcesContent":["import React,{ useEffect, useContext } from 'react'\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { View,StyleSheet,ActivityIndicator } from 'react-native';\r\nimport { useUserActions } from '../hook/useUserActionsContext';  \r\nimport { UserContext } from '../screens/UserConfirm/Context';\r\nimport { checkStorageUser } from '../actions/UserActions'\r\nimport RootScreen from '../screens/UserConfirm/RootScreen'; \r\nimport Tabar from \"../components/Tabar\"; \r\n\r\nconst HandleScreen = () => {\r\n  const { userName, isLoading,isUser } = useContext(UserContext) \r\n  const { login,logout } = useUserActions()\r\n  \r\nconst dataUser = ['lukim','admin']\r\n  useEffect(() => {\r\n    setTimeout( async () => {  \r\n      await checkStorageUser('userToken').then(data => {\r\n        if(dataUser.includes(data,0)) { \r\n            login({\r\n              userName:\"lukim\",\r\n              passWord:\"lukim\"\r\n            })\r\n        }\r\n        else {\r\n           logout()\r\n        } \r\n      }) \r\n            \r\n    }, 1000); \r\n  }, [userName]); \r\n  if( isLoading ) {\r\n        return (\r\n          <View style={{flex:1,justifyContent:'center',alignItems:'center'}}>\r\n            <ActivityIndicator size=\"large\"  color=\"#1b242d\"/>\r\n          </View>\r\n        );\r\n  }\r\n  return (\r\n    <>\r\n      { \r\n        isUser ? (\r\n          <Tabar />\r\n        )\r\n        :\r\n        <NavigationContainer >\r\n          <RootScreen/> \r\n        </NavigationContainer>\r\n      }\r\n      \r\n    </>\r\n  );\r\n};\r\n\r\nexport default HandleScreen;\r\n\r\nconst styles = StyleSheet.create({});\r\n"]},"metadata":{},"sourceType":"module"}