{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState, useEffect, useMemo, useReducer } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { AuthContext } from \"./screens/UserConfirm/Context\";\nimport RootScreen from \"./screens/UserConfirm/RootScreen\";\nimport HomeScreen from \"./screens/HomeScreen\";\nimport Tabar from \"./components/Tabar\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      userToken = _useState4[0],\n      setUserToken = _useState4[1];\n\n  useEffect(function () {\n    setTimeout(function _callee() {\n      var userToken;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              userToken = null;\n              _context.prev = 1;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('userToken'));\n\n            case 4:\n              userToken = _context.sent;\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(_context.t0);\n\n            case 10:\n              dispatch({\n                type: 'RETRIEVE_TOKEN',\n                token: userToken\n              });\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[1, 7]], Promise);\n    }, 1000);\n  }, []);\n\n  if (loginState.isLoading) {\n    return _jsx(View, {\n      style: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      children: _jsx(ActivityIndicator, {\n        size: \"large\",\n        color: \"#1b242d\"\n      })\n    });\n  }\n\n  return _jsx(AuthContext.Provider, {\n    value: authContext,\n    children: loginState.userToken !== null ? _jsx(Tabar, {}) : _jsx(NavigationContainer, {\n      children: _jsx(RootScreen, {})\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  margintabbar: {}\n});","map":{"version":3,"sources":["D:/Lukim/App.js"],"names":["useState","useEffect","useMemo","useReducer","NavigationContainer","AuthContext","RootScreen","HomeScreen","Tabar","App","isLoading","setIsLoading","userToken","setUserToken","setTimeout","AsyncStorage","getItem","console","log","dispatch","type","token","loginState","flex","justifyContent","alignItems","authContext","styles","StyleSheet","create","margintabbar"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA6BC,OAA7B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SACEC,mBADF,QAEO,0BAFP;;;;AAIA,SAASC,WAAT;AACA,OAAOC,UAAP;AACA,OAAOC,UAAP;AACA,OAAOC,KAAP;;AACA,eAAe,SAASC,GAAT,GAAe;AAK5B,kBAAiCT,QAAQ,CAAC,IAAD,CAAzC;AAAA;AAAA,MAAOU,SAAP;AAAA,MAAiBC,YAAjB;;AACA,mBAAiCX,QAAQ,CAAC,IAAD,CAAzC;AAAA;AAAA,MAAOY,SAAP;AAAA,MAAiBC,YAAjB;;AAEAZ,EAAAA,SAAS,CAAC,YAAM;AACda,IAAAA,UAAU,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAGTF,cAAAA,SAAS,GAAG,IAAZ;AAHS;AAAA;AAAA,+CAKWG,YAAY,CAACC,OAAb,CAAqB,WAArB,CALX;;AAAA;AAKPJ,cAAAA,SALO;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOPK,cAAAA,OAAO,CAACC,GAAR;;AAPO;AAUTC,cAAAA,QAAQ,CAAC;AAAEC,gBAAAA,IAAI,EAAE,gBAAR;AAA0BC,gBAAAA,KAAK,EAAET;AAAjC,eAAD,CAAR;;AAVS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD,EAWP,IAXO,CAAV;AAYD,GAbQ,EAaN,EAbM,CAAT;;AAcA,MAAIU,UAAU,CAACZ,SAAf,EAA2B;AACzB,WACE,KAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACa,QAAAA,IAAI,EAAC,CAAN;AAAQC,QAAAA,cAAc,EAAC,QAAvB;AAAgCC,QAAAA,UAAU,EAAC;AAA3C,OAAb;AAAA,gBACE,KAAC,iBAAD;AAAmB,QAAA,IAAI,EAAC,OAAxB;AAAiC,QAAA,KAAK,EAAC;AAAvC;AADF,MADF;AAKD;;AACD,SACE,KAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,WAA7B;AAAA,cAEIJ,UAAU,CAACV,SAAX,KAAyB,IAAzB,GACE,KAAC,KAAD,KADF,GAIA,KAAC,mBAAD;AAAA,gBACA,KAAC,UAAD;AADA;AANJ,IADF;AAaD;AACD,IAAMe,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,YAAY,EAAE;AADiB,CAAlB,CAAf","sourcesContent":["import { useState, useEffect,useMemo,useReducer } from 'react'\nimport { \n  NavigationContainer,  \n} from '@react-navigation/native';\nimport { View,StyleSheet,ActivityIndicator } from 'react-native';\nimport { AuthContext } from './screens/UserConfirm/Context';\nimport RootScreen from './screens/UserConfirm/RootScreen';\nimport HomeScreen from './screens/HomeScreen'\nimport Tabar from \"./components/Tabar\";\nexport default function App() {\n  \n\n  \n\n  const [isLoading,setIsLoading] = useState(true)\n  const [userToken,setUserToken] = useState(null) \n  \n  useEffect(() => {\n    setTimeout(async() => {\n      // setIsLoading(false);\n      let userToken;\n      userToken = null;\n      try {\n        userToken = await AsyncStorage.getItem('userToken');\n      } catch(e) {\n        console.log(e);\n      }\n      // console.log('user token: ', userToken);\n      dispatch({ type: 'RETRIEVE_TOKEN', token: userToken });\n    }, 1000);\n  }, []);\n  if( loginState.isLoading ) {\n    return(\n      <View style={{flex:1,justifyContent:'center',alignItems:'center'}}>\n        <ActivityIndicator size=\"large\"  color=\"#1b242d\"/>\n      </View>\n    );\n  }\n  return (  \n    <AuthContext.Provider value={authContext}>\n      \n      { loginState.userToken !== null ? (\n          <Tabar />\n      )\n    :\n        <NavigationContainer >\n        <RootScreen/> \n      </NavigationContainer>\n    }\n    </AuthContext.Provider>\n  );\n} \nconst styles = StyleSheet.create({ \n  margintabbar: { \n  }\n});\n"]},"metadata":{},"sourceType":"module"}