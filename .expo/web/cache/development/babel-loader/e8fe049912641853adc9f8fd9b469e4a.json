{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useEffect, useContext } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { NavigationContainer, DefaultTheme as NavigationDefaultTheme, DarkTheme as NavigationDarkTheme } from '@react-navigation/native';\nimport { Provider as PaperProvider, DefaultTheme as PaperDefaultTheme, DarkTheme as PaperDarkTheme } from 'react-native-paper';\nimport { useUserActions } from \"../hook/useUserActionsContext\";\nimport { UserContext } from \"../screens/UserConfirm/Context\";\nimport { checkStorageUser } from \"../actions/UserActions\";\nimport RootScreen from \"../screens/UserConfirm/RootScreen\";\nimport Tabar from \"../components/Tabar\";\nimport { SettingContext } from \"../screens/SettingScreen/Context\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar HandleScreen = function HandleScreen() {\n  var _useContext = useContext(SettingContext),\n      options = _useContext.options;\n\n  var CustomDefaultTheme = _objectSpread(_objectSpread(_objectSpread({}, NavigationDefaultTheme), PaperDefaultTheme), {}, {\n    colors: _objectSpread(_objectSpread(_objectSpread({}, NavigationDefaultTheme.colors), PaperDefaultTheme.colors), {}, {\n      background: '#ffffff',\n      text: '#333333',\n      iconActive: 'red'\n    })\n  });\n\n  var CustomDarkTheme = _objectSpread(_objectSpread(_objectSpread({}, NavigationDarkTheme), PaperDarkTheme), {}, {\n    colors: _objectSpread(_objectSpread(_objectSpread({}, NavigationDarkTheme.colors), PaperDarkTheme.colors), {}, {\n      background: '#333333',\n      text: '#ffffff',\n      iconActive: '#fff'\n    })\n  });\n\n  var theme = options.theme === \"light\" ? CustomDarkTheme : CustomDefaultTheme;\n\n  var _useContext2 = useContext(UserContext),\n      userName = _useContext2.userName,\n      isLoading = _useContext2.isLoading,\n      isUser = _useContext2.isUser;\n\n  var _useUserActions = useUserActions(),\n      login = _useUserActions.login,\n      logout = _useUserActions.logout;\n\n  var dataUser = ['lukim', 'admin'];\n  useEffect(function () {\n    setTimeout(function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(checkStorageUser('userToken').then(function (data) {\n                if (dataUser.includes(data, 0)) {\n                  login({\n                    userName: \"lukim\",\n                    passWord: \"lukim\"\n                  });\n                } else {\n                  logout();\n                }\n              }));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }, 1000);\n  }, [userName]);\n\n  if (isLoading) {\n    return _jsx(View, {\n      style: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      children: _jsx(ActivityIndicator, {\n        size: \"large\",\n        color: \"#1b242d\"\n      })\n    });\n  }\n\n  return _jsx(_Fragment, {\n    children: _jsx(PaperProvider, {\n      theme: theme,\n      children: _jsx(NavigationContainer, {\n        theme: theme,\n        children: isUser ? _jsx(Tabar, {}) : _jsx(RootScreen, {})\n      })\n    })\n  });\n};\n\nexport default HandleScreen;\nvar styles = StyleSheet.create({});","map":{"version":3,"sources":["D:/Lukim/screens/HandleScreen.js"],"names":["React","useEffect","useContext","NavigationContainer","DefaultTheme","NavigationDefaultTheme","DarkTheme","NavigationDarkTheme","Provider","PaperProvider","PaperDefaultTheme","PaperDarkTheme","useUserActions","UserContext","checkStorageUser","RootScreen","Tabar","SettingContext","HandleScreen","options","CustomDefaultTheme","colors","background","text","iconActive","CustomDarkTheme","theme","userName","isLoading","isUser","login","logout","dataUser","setTimeout","then","data","includes","passWord","flex","justifyContent","alignItems","styles","StyleSheet","create"],"mappings":"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","sourcesContent":["import React,{ useEffect, useContext } from 'react' \r\nimport { View,StyleSheet,ActivityIndicator } from 'react-native';\r\nimport { \r\n  NavigationContainer, \r\n  DefaultTheme as NavigationDefaultTheme,\r\n  DarkTheme as NavigationDarkTheme\r\n} from '@react-navigation/native';\r\nimport { \r\n  Provider as PaperProvider, \r\n  DefaultTheme as PaperDefaultTheme,\r\n  DarkTheme as PaperDarkTheme \r\n} from 'react-native-paper';\r\n\r\nimport { useUserActions } from '../hook/useUserActionsContext';  \r\nimport { UserContext } from '../screens/UserConfirm/Context';\r\nimport { checkStorageUser } from '../actions/UserActions'\r\n\r\nimport RootScreen from '../screens/UserConfirm/RootScreen'; \r\nimport Tabar from \"../components/Tabar\"; \r\n\r\nimport { SettingContext } from '../screens/SettingScreen/Context';\r\n\r\nconst HandleScreen = () => {\r\n  const { options } = useContext(SettingContext); \r\n  const CustomDefaultTheme = {\r\n    ...NavigationDefaultTheme,\r\n    ...PaperDefaultTheme,\r\n    colors: {\r\n      ...NavigationDefaultTheme.colors,\r\n      ...PaperDefaultTheme.colors,\r\n      background: '#ffffff',\r\n      text: '#333333',\r\n      iconActive: 'red'\r\n    }, \r\n  }\r\n  \r\n  const CustomDarkTheme = {\r\n    ...NavigationDarkTheme,\r\n    ...PaperDarkTheme,\r\n    colors: {\r\n      ...NavigationDarkTheme.colors,\r\n      ...PaperDarkTheme.colors,\r\n      background: '#333333',\r\n      text: '#ffffff',\r\n      iconActive: '#fff'\r\n    }, \r\n  }\r\n  const theme = options.theme ===\"light\" ? CustomDarkTheme : CustomDefaultTheme;\r\n  const { userName, isLoading,isUser } = useContext(UserContext) \r\n  const { login,logout } = useUserActions()\r\n  \r\n  const dataUser = ['lukim','admin']\r\n  useEffect(() => {\r\n    setTimeout( async () => {  \r\n      await checkStorageUser('userToken').then(data => {\r\n        if(dataUser.includes(data,0)) { \r\n            login({\r\n              userName:\"lukim\",\r\n              passWord:\"lukim\"\r\n            })\r\n        }\r\n        else {\r\n           logout()\r\n        } \r\n      }) \r\n            \r\n    }, 1000); \r\n  }, [userName]); \r\n  if( isLoading ) {\r\n        return (\r\n          <View style={{flex:1,justifyContent:'center',alignItems:'center'}}>\r\n            <ActivityIndicator size=\"large\"  color=\"#1b242d\"/>\r\n          </View>\r\n        );\r\n  }\r\n  return (\r\n    <>\r\n    <PaperProvider   theme={theme}>\r\n        <NavigationContainer  theme={theme} >\r\n        { \r\n          isUser ? (\r\n            <Tabar/>\r\n          )\r\n          :\r\n            <RootScreen/> \r\n        }\r\n        </NavigationContainer>\r\n      </PaperProvider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HandleScreen;\r\n\r\nconst styles = StyleSheet.create({});\r\n"]},"metadata":{},"sourceType":"module"}