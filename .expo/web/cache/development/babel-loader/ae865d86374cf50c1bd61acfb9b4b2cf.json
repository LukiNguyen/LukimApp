{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect, useMemo, useContext } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { useUserActions } from \"../hook/useUserActionsContext\";\nimport { UserContext } from \"../screens/UserConfirm/Context\";\nimport { checkStorageUser } from \"../actions/UserActions\";\nimport RootScreen from \"../screens/UserConfirm/RootScreen\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport Tabar from \"../components/Tabar\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar HandleScreen = function HandleScreen() {\n  var _useContext = useContext(UserContext),\n      userName = _useContext.userName,\n      isLoading = _useContext.isLoading,\n      isUser = _useContext.isUser;\n\n  var _useUserActions = useUserActions(),\n      redirectUser = _useUserActions.redirectUser;\n\n  useEffect(function () {\n    setTimeout(function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(redirectUser());\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }, 1000);\n  }, [userName]);\n\n  if (isLoading) {\n    return _jsx(View, {\n      style: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      children: _jsx(ActivityIndicator, {\n        size: \"large\",\n        color: \"#1b242d\"\n      })\n    });\n  }\n\n  return _jsx(_Fragment, {\n    children: isUser !== null ? _jsx(Tabar, {}) : _jsx(NavigationContainer, {\n      children: _jsx(RootScreen, {})\n    })\n  });\n};\n\nexport default HandleScreen;\nvar styles = StyleSheet.create({});","map":{"version":3,"sources":["D:/Lukim/screens/HandleScreen.js"],"names":["React","useState","useEffect","useMemo","useContext","NavigationContainer","useUserActions","UserContext","checkStorageUser","RootScreen","AsyncStorage","Tabar","HandleScreen","userName","isLoading","isUser","redirectUser","setTimeout","flex","justifyContent","alignItems","styles","StyleSheet","create"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAmCC,OAAnC,EAA2CC,UAA3C,QAA6D,OAA7D;AACA,SACEC,mBADF,QAEO,0BAFP;;;;AAIA,SAASC,cAAT;AACA,SAASC,WAAT;AACA,SAASC,gBAAT;AACA,OAAOC,UAAP;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AACA,OAAOC,KAAP;;;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,oBAAuCR,UAAU,CAACG,WAAD,CAAjD;AAAA,MAAQM,QAAR,eAAQA,QAAR;AAAA,MAAkBC,SAAlB,eAAkBA,SAAlB;AAAA,MAA4BC,MAA5B,eAA4BA,MAA5B;;AACA,wBAA0BT,cAAc,EAAxC;AAAA,MAAQU,YAAR,mBAAQA,YAAR;;AAEAd,EAAAA,SAAS,CAAC,YAAM;AACde,IAAAA,UAAU,CAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACFD,YAAY,EADV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF,EAEP,IAFO,CAAV;AAGD,GAJQ,EAIN,CAACH,QAAD,CAJM,CAAT;;AAKA,MAAIC,SAAJ,EAAgB;AACV,WACE,KAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACI,QAAAA,IAAI,EAAC,CAAN;AAAQC,QAAAA,cAAc,EAAC,QAAvB;AAAgCC,QAAAA,UAAU,EAAC;AAA3C,OAAb;AAAA,gBACE,KAAC,iBAAD;AAAmB,QAAA,IAAI,EAAC,OAAxB;AAAiC,QAAA,KAAK,EAAC;AAAvC;AADF,MADF;AAKL;;AACD,SACE;AAAA,cAEIL,MAAM,KAAK,IAAX,GACE,KAAC,KAAD,KADF,GAIA,KAAC,mBAAD;AAAA,gBACE,KAAC,UAAD;AADF;AANJ,IADF;AAcD,CA9BD;;AAgCA,eAAeH,YAAf;AAEA,IAAMS,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB,EAAlB,CAAf","sourcesContent":["import React,{ useState, useEffect,useMemo,useContext } from 'react'\r\nimport { \r\n  NavigationContainer,  \r\n} from '@react-navigation/native';\r\nimport { View,StyleSheet,ActivityIndicator } from 'react-native';\r\nimport { useUserActions } from '../hook/useUserActionsContext';  \r\nimport { UserContext } from '../screens/UserConfirm/Context';\r\nimport { checkStorageUser } from '../actions/UserActions'\r\nimport RootScreen from '../screens/UserConfirm/RootScreen';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage'\r\nimport Tabar from \"../components/Tabar\"; \r\n\r\nconst HandleScreen = () => {\r\n  const { userName, isLoading,isUser } = useContext(UserContext) \r\n  const { redirectUser, } = useUserActions()\r\n  \r\n  useEffect(() => {\r\n    setTimeout( async() => {\r\n        await redirectUser()\r\n    }, 1000); \r\n  }, [userName]); \r\n  if( isLoading ) {\r\n        return (\r\n          <View style={{flex:1,justifyContent:'center',alignItems:'center'}}>\r\n            <ActivityIndicator size=\"large\"  color=\"#1b242d\"/>\r\n          </View>\r\n        );\r\n  }\r\n  return (\r\n    <>\r\n      { \r\n        isUser !== null ? (\r\n          <Tabar />\r\n        )\r\n        :\r\n        <NavigationContainer >\r\n          <RootScreen/> \r\n        </NavigationContainer>\r\n      }\r\n      \r\n    </>\r\n  );\r\n};\r\n\r\nexport default HandleScreen;\r\n\r\nconst styles = StyleSheet.create({});\r\n"]},"metadata":{},"sourceType":"module"}